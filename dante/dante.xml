<tool id="dante" name="Domain based ANnotation of Transposable Elements - DANTE" version="1.1.8">
  <description> Tool for annotation of transposable elements based on the similarity to conserved protein domains database. </description>
  <requirements>
    <requirement type="package">dante=0.1.8</requirement>
  </requirements>
  <stdio>
    <regex match="Traceback" source="stderr" level="fatal" description="Unknown error" />
    <regex match="error" source="stderr" level="fatal" description="Unknown error" />
  </stdio>
  <command>
    #if str($input_type.input_type_selector) == "aln"
      parse_aln.py -a $(input_sequences) -f sequences.fasta -p sequences.profile
      &amp;&amp;
      INPUT_SEQUENCES="sequences.fasta"
    #else    
      INPUT_SEQUENCES=$(input_sequences)
    #end if
    &amp;&amp;

    dante --query \${INPUT_SEQUENCES} --domain_gff ${DomGff}
	  --database $database
      --scoring_matrix ${scoring_matrix}
      --cpu \${GALAXY_SLOTS:-1}
    &amp;&amp;
    dante_gff_output_filtering.py --dom_gff ${DomGff}
    --domains_prot_seq ${Domains_filtered} --domains_filtered ${DomGff_filtered}
    --output_dir .
    --selected_dom All --th_identity 0.35
    --th_similarity 0.45 --th_length 0.8
    --interruptions 3 --max_len_proportion 1.2
    --element_type ''

    #if str($input_type.input_type_selector) == "aln"
     &amp;&amp;
     coverage2gff.py -p sequences.profile -g ${DomGff}
    #end if

    #if str($iterative) == "Yes"
    &amp;&amp;
   dante_gff_output_filtering.py --dom_gff ${DomGff}
    --domains_prot_seq domains_filtered.fasta --domains_filtered domains_filtered.gff
    --output_dir .
    --selected_dom All --th_identity 0.35
    --th_similarity 0.45 --th_length 0.9
    --interruptions 1 --max_len_proportion 1.1
    --element_type ''
    &amp;&amp;



    fasta2database.py domains_filtered.fasta domains_filtered.db
    domains_filtered.class
    &amp;&amp;

    lastdb -p domains_filtered.db domains_filtered.db
    &amp;&amp;

    dante.py --query \${INPUT_SEQUENCES} --domain_gff ${DomGff2}
	  --protein_database domains_filtered.db
	  --classification domains_filtered.class
      --scoring_matrix BL80


    #if str($input_type.input_type_selector) == "aln"
     &amp;&amp;
     coverage2gff.py -p sequences.profile -g ${DomGff2}
    #end if
    #end if

  </command>
  <inputs>

    <conditional name="input_type">
      <param name="input_type_selector" type="select" label="Choose the type of sequence data">
        <option value="fasta" selected="true">Fasta</option>
        <option value="aln">Aln file</option>
      </param>
      <when value="fasta">
        <param name="input_sequences" type="data" format="fasta" label="Sequences in fasta format"/>
      </when>
      <when value="aln">
        <param name="input_sequences" type="data" format="txt" label="Sequences in ALN format (extracted from RepeatExplorer)"/>
      </when>
    </conditional>
    <param name="database" type="select" label="Select REXdb database">
        <option value="Viridiplantae_v3.0" selected="true">Viridiplantae_v3.0</option>
        <option value="Metazoa_v3.1" selected="true">Metazoa_v3.1</option>
        <option value="Viridiplantae_v2.2" selected="true">Viridiplantae_v2.2</option>
        <option value="Metazoa_v3.0" selected="true">Metazoa_v3.1</option>
    </param>
    <param name="scoring_matrix" type="select" label="Select scoring matrix">
      <option value="BL80" selected="true" >BLOSUM80</option>
      <option value="BL62">BLOSUM62</option>
      <option value="MIQS">MIQS</option>
    </param>

    <param name="iterative" type="select" label="Run iterative search" truevalue="true" valsevalue="false"
           help="Second iteration run search against database of proteins extracted from query. Second iteration can yield some extra hits in some cases.">
      <option value="No" selected="true">No</option>
      <option value="Yes">Yes</option>
    </param>
  </inputs>

  <outputs>
    <data format="gff3" name="DomGff"  label="DANTE on ${on_string}, full output" />
    <data format="gff3" name="DomGff_filtered"  label="DANTE on ${on_string}, filtered output" />
    <data format="fasta" name="Domains_filtered"  label="DANTE on ${on_string}, protein domains, filtered output" />
    <data format="gff3" name="DomGff2" label="DANTE on ${on_string}: 2nd pass">
      <filter>iterative == "Yes" </filter>
    </data>
  </outputs>
  <tests>
    <test>
      <param name="input_type" value="fasta"/>
      <param name="input_sequences" value="GEPY_test_long_1.fa"/>
      <param name="db_type" value="Viridiplantae_v3.0"/>
      <param name="scoring_matrix" value="BL80"/>
      <param name="iterative" value="No"/>
      <output name="DomGff" value="GEPY_test_long_1_output_unfiltered.gff3"/>
    </test>


  </tests>


  <help>


    

    **WHAT IT DOES**

    This tool uses external aligning programme `LAST`_ and RepeatExplorer database of TE protein domains(REXdb) (Viridiplantae and Metazoa)

    .. _LAST: http://last.cbrc.jp/  

    *Lastal* runs similarity search to find hits between query DNA sequence and our database of protein domains from all Viridiplantae repetitive elements. Hits with overlapping positions in the sequence (even through other hits) forms a cluster which represents one potential protein domain. Strand orientation is taken into consideration when forming the clusters which means each cluster is built from forward or reverse stranded hits exclusively. The clusters are subsequently processed separately; within one cluster positions are scanned base-by-base and classification strings are assigned for each of them based on the database sequences which were mapped on that place. These asigned classification strings consist of a domain type as well as class and lineage of the repetitive element where the database protein comes from. Different classification levels are separated by "|" character. Every hit is scored according to the scoring matrix used for DNA-protein alignment (BLOSUM80). For single position only the hits reaching certain percentage (80% by default) of the overall best score within the whole cluster are reported. One cluster of overlapping hits represents one domain region and is recorded as one line in the resulting GFF3 file. Regarding the classition strings assigned to one region (cluster) there are three situations that can occur:

	  1. There is a single classification string assigned to each position as well as classifications along all the positions in the region are mutually uniform, in this case domain's final classification is equivalent to this unique classification.
	  2. There are multiple classification strings assigned to one cluster, i.e. one domain, which leads to classification to the common (less specific) level of all the strings
	  3. There is a conflict at the domain type level, domains are reported with slash (e.g. RT/INT) and the classification is in this case ambiguous
	  
    **There are 2 outputs produced by this tool:**
	  
    1. GFF3 file of all proteins domains built from all hits found by LAST. Domains are reported per line as regions (start - end) on the original DNA sequence including the seq ID, alignment score and strand orientation. The last "Attributes" column contains several semicolon-separated information related to annotation, repetitive classification, alignment and its quality. This file can undergo further filtering using *Protein Domain Filter* tool

    - Attributes reported always:

	  Name
		type of domain; if ambiguous reported with slash 
		
	  Final_classification 
		definite classification based on all partial classifications of Region_hits_classifications attribute or 
		"Ambiguous_domain" when there is an ambiguous domain type 
		
	  Region_Hits_Classifications
		all hits classifications (comma separated) from a certain domain region that reach the set score threshold; in case of multiple annotations the square brackets indicate the number of bases having this particular classification		
		
    - Attributes only reported in case of unambiguous domain type (all the attributes including quality information are related to the Best_Hit of the region):
	  
	  Best_hit  
		classification and position of the best alignment with the highest score within the cluster; in the square brackets is the percentage of the whole cluster range that this best hit covers
		
	  Best_Hit_DB_Pos
		showing which part of the original datatabase domain corresponding to the Best Hit was aligned on query DNA (e.g. **Best_Hit_DB_Pos=17:75of79** means the Best Hit reported in GFF represents region from 17th to 75th of total 79 aminoacids in the original domain from the database)
		
	  DB_Seq 
		database protein sequence of the best hit mapped to the query DNA
		
	  Query_Seq 
		alignment sequence of the query DNA for the best hit	
		
	  Identity
		ratio of identical amino acids in alignment sequence to the length of alignment
		
	  Similarity
		ratio of alignment positions with positive score (according to the scoring matrix) to the length of alignment
		
	  Relat_Length
		ratio of gapless length of the aligned protein sequence to the whole length of the database protein 
		
	  Relat_Interruptions
		number of the interruptions (frameshifts + stop codons) in aligned translated query sequence per each starting 100 AA
		
	  Hit_to_DB_Length
		proportion of alignment length to the original length of the protein domain from database
	  
	  

    !NOTE: Tool can in average process 0.5 Gbps of the DNA sequence per day. This is only a rough estimate and it is highly dependent on input data (repetive elements occurence) as well as computing resources. Maximum running time of the tool is 7 days.

  </help>
</tool>

